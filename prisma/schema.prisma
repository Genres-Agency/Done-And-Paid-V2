// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
  MANAGER
  ACCOUNTANT
  SALESPERSON
  BANNED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIALLY_PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CHEQUE
  ONLINE
}

enum TransactionType {
  INCOME
  EXPENSE
  REFUND
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  email              String?       @unique
  password           String?
  role               UserRole      @default(USER)
  accounts           Account[]
  image              String?
  phoneNumber        String?
  address            String?
  bio                String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isTwoFactorEnabled Boolean       @default(false)
  invoicesCreated    Invoice[]     @relation("CreatedBy")
  invoicesApproved   Invoice[]     @relation("ApprovedBy")
  transactions       Transaction[]
  quotesCreated      Quote[]       @relation("QuoteCreatedBy")
  quotesApproved     Quote[]       @relation("QuoteApprovedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phoneNumber String?
  address     String?
  company     String?
  taxNumber   String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invoices    Invoice[]
  Quote       Quote[]
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phoneNumber String?
  address     String?
  company     String?
  taxNumber   String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  sku          String        @unique
  price        Float
  cost         Float
  supplierId   String
  supplier     Supplier      @relation(fields: [supplierId], references: [id])
  inventory    Inventory?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  QuoteItem    QuoteItem[]
}

model Inventory {
  id        String   @id @default(cuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  minStock  Int      @default(10)
  maxStock  Int?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  items         InvoiceItem[]
  subtotal      Float
  tax           Float
  discount      Float         @default(0)
  total         Float
  notes         String?
  dueDate       DateTime
  paymentStatus PaymentStatus @default(PENDING)
  createdById   String
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id])
  approvedById  String?
  approvedBy    User?         @relation("ApprovedBy", fields: [approvedById], references: [id])
  payments      Payment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  amount        Float
  paymentMethod PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Float
  description String?
  date        DateTime
  reference   String?
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum QuoteStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CONVERTED
  EXPIRED
}

model Quote {
  id           String      @id @default(cuid())
  quoteNumber  String      @unique
  customerId   String
  customer     Customer    @relation(fields: [customerId], references: [id])
  items        QuoteItem[]
  subtotal     Float
  tax          Float
  discount     Float       @default(0)
  total        Float
  notes        String?
  validUntil   DateTime
  status       QuoteStatus @default(DRAFT)
  createdById  String
  createdBy    User        @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  approvedById String?
  approvedBy   User?       @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model QuoteItem {
  id        String   @id @default(cuid())
  quoteId   String
  quote     Quote    @relation(fields: [quoteId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
