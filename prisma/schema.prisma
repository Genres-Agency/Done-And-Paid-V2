// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
  MANAGER
  ACCOUNTANT
  SALESPERSON
  BANNED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIALLY_PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CHEQUE
  ONLINE
}

enum TransactionType {
  INCOME
  EXPENSE
  REFUND
}

enum BusinessType {
  RETAIL
  WHOLESALE
  MANUFACTURING
  SERVICE
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  password           String?
  role               UserRole            @default(USER)
  businessType       BusinessType?
  accounts           Account[]
  image              String?
  phoneNumber        String?
  address            String?
  bio                String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isTwoFactorEnabled Boolean             @default(false)
  invoicesCreated    Invoice[]           @relation("CreatedBy")
  invoicesApproved   Invoice[]           @relation("ApprovedBy")
  transactions       Transaction[]
  quotesCreated      Quote[]             @relation("QuoteCreatedBy")
  quotesApproved     Quote[]             @relation("QuoteApprovedBy")
  ProjectSubmission  ProjectSubmission[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phoneNumber String?
  address     String?
  company     String?
  taxNumber   String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  sku          String        @unique
  price        Float
  cost         Float
  supplierId   String
  supplier     Supplier      @relation(fields: [supplierId], references: [id])
  inventory    Inventory?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  QuoteItem    QuoteItem[]
}

model Inventory {
  id        String   @id @default(cuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  minStock  Int      @default(10)
  maxStock  Int?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id              String    @id @default(cuid())
  name            String
  email           String?
  phoneNumber     String?
  address         String?
  company         String?
  companyLogo     String?
  taxNumber       String?
  billingAddress  String?
  shippingAddress String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  invoices        Invoice[]
  Quote           Quote[]
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])

  // Business Information
  businessName      String
  businessLogo      String?
  businessAddress   String
  businessPhone     String
  businessEmail     String
  businessWebsite   String?
  businessTaxNumber String?

  // Invoice Items (stored as JSON)
  items Json

  // Invoice Details
  invoiceDate         DateTime
  dueDate             DateTime
  currency            String   @default("USD")
  referenceNumber     String?
  purchaseOrderNumber String?
  salespersonName     String?

  // Financial Details
  subtotal      Float
  discountType  String @default("percentage")
  discountValue Float  @default(0)
  taxType       String @default("percentage")
  taxValue      Float  @default(0)
  total         Float
  paidAmount    Float  @default(0)

  // Additional Information
  notes              String?
  termsAndConditions String?
  paymentMethod      PaymentMethod?
  paymentStatus      PaymentStatus  @default(PENDING)
  isDraft            Boolean        @default(false)
  installmentOption  Boolean        @default(false)
  installmentDetails Json?

  // Metadata
  createdById  String
  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id])
  approvedById String?
  approvedBy   User?         @relation("ApprovedBy", fields: [approvedById], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Payment      Payment[]
  InvoiceItem  InvoiceItem[]
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  amount        Float
  paymentMethod PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Float
  description String?
  date        DateTime
  reference   String?
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum QuoteStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CONVERTED
  EXPIRED
}

model Quote {
  id          String   @id @default(cuid())
  quoteNumber String   @unique
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])

  // Business Information
  businessName      String
  businessLogo      String?
  businessAddress   String
  businessPhone     String
  businessEmail     String
  businessWebsite   String?
  businessTaxNumber String?

  // Quote Items
  items QuoteItem[]

  // Quote Details
  quoteDate           DateTime
  validUntil          DateTime
  currency            String   @default("USD")
  referenceNumber     String?
  purchaseOrderNumber String?
  salespersonName     String?

  // Financial Details
  subtotal      Float
  discountType  String @default("percentage")
  discountValue Float  @default(0)
  taxType       String @default("percentage")
  taxValue      Float  @default(0)
  total         Float

  // Additional Information
  notes              String?
  termsAndConditions String?
  status             QuoteStatus @default(DRAFT)
  isDraft            Boolean     @default(false)
  convertedToInvoice Boolean     @default(false)
  invoiceId          String?
  validityPeriod     Int         @default(30)
  revisionNumber     Int?        @default(1)

  // Metadata
  createdById  String
  createdBy    User     @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  approvedById String?
  approvedBy   User?    @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model QuoteItem {
  id            String   @id @default(cuid())
  quoteId       String
  quote         Quote    @relation(fields: [quoteId], references: [id])
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  description   String
  quantity      Int
  unitPrice     Float
  discountType  String   @default("percentage")
  discountValue Float    @default(0)
  taxType       String   @default("percentage")
  taxValue      Float    @default(0)
  total         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Store {
  id                 String   @id @default(cuid())
  name               String
  legalName          String?
  taxNumber          String?
  email              String?
  phoneNumber        String?
  address            String?
  city               String?
  state              String?
  country            String?
  postalCode         String?
  logo               String?
  website            String?
  currency           String   @default("USD")
  businessHours      String?
  description        String?
  termsAndConditions String?  @db.Text
  privacyPolicy      String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id          String    @id @default(cuid())
  title       String
  url         String
  type        MediaType
  description String?
  size        Int
  mimeType    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProjectStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ProjectSubmission {
  id             String        @id @default(cuid())
  title          String
  description    String
  clientName     String
  clientEmail    String
  clientPhone    String?
  budget         Float?
  timeline       DateTime?
  requirements   String?
  status         ProjectStatus @default(PENDING)
  attachments    Json?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assignedUserId String?
  assignedUser   User?         @relation(fields: [assignedUserId], references: [id])
}
